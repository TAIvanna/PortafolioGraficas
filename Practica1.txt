//FIGURAS DE COLORES

//1) Modifica el shader
const char* vertexShaderSourceWithColor = 
"#version 330 core\n"
"layout (location = 0) in vec3 aPos;\n"
"layout (location = 1) in vec3 aColor;\n"

"out vec3 ourColor;"
"void main()\n"
"{\n"
"   gl_Position = vec4(aPos, 1.0);\n"
"   ourColor = aColor;"
"}\0";


const char* fragmentShaderSourceWithColor = "#version 330 core\n"
"out vec4 FragColor;\n"
"in vec3 ourColor;"
"void main()\n"
"{\n"
"   FragColor = vec4(ourColor.x, ourColor.y, ourColor.z, 1.0f);\n"
"}\n\0";



//Modifica el arreglo de vertices
float verticesTriangulosColores[] = {
        -0.5f,0.5f,0.0f,    0.976, 1, 0.101,  // 0
        0.0f, 0.5f, 0.0f,   0.976, 1, 0.101,  // 1
        -0.5f, -0.0f, 0.0f, 0.976, 1, 0.101,  // 2 

        0.0f, 0.5f, 0.0f,   0.290, 0.643, 0.254,  // 3
        0.0f, 0.0f, 0.0f,   0.290, 0.643, 0.254,  // 4
        -0.5f,  0.0f, 0.0f, 0.290, 0.643, 0.254,   // 5

        0.25f,  0.5f, 0.0f, 1, 0, 0,        // 6
        0.0f,  0.5f, 0.0f,  1, 0, 0,        // 7
        0.25f,  0.0f, 0.0f, 1, 0, 0,        // 8

        0.0f,  0.0f, 0.0f,  0.474, 0.207, 0.207,
        0.0f,  0.5f, 0.0f,  0.474, 0.207, 0.207,
        0.25f, 0.0f, 0.0f,  0.474, 0.207, 0.207,

    };


//AGREGA LOS ATRIBUTOS
glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)0); //Column Major
    glEnableVertexAttribArray(0);

    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)(3 * sizeof(float)));
    glEnableVertexAttribArray(1);


//DIBUJA EN EL RENDER

        glDrawArrays(GL_TRIANGLES, 0, 15);
        //glDrawElements(GL_TRIANGLES, 15, GL_UNSIGNED_INT, 0);


//NOTA SI NO HACES USO DEL ARREGLO DE VERTICE PUEDES OMITIR EL GLBINDBUFFER Y EL GLBUFFER DATA
//DE LA SECCIÃ“N DONDE SE ESTAN DEFINIENDO LOS BUFFERS Y EL VERTEX ARRAY OBJECT(VAO)
    /*glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);
    */